from ast import arg
from pydoc import doc
from string import ascii_uppercase
import sys
from inspect import isfunction, getargspec,getfullargspec
from jinja2 import is_undefined


'''
DESCRIPTION
This file can help generate simple nodes, namely those that do not need a visual representation or are Python - implemented functions.
It is mainly a dev tool and as such is NOT suitable for 1 to 1 renditions of module functions. Code generated by this function still needs tested and debugged

'''
class Ryven_Nodifier:
    '''
    Mostly a function module. No need for instantiation
    '''
    def num_args(f):
        '''Attempt to parse the docstring of function not implemented in Python'''
        if isfunction(f):
            return len(getargspec(f).args)
        else:
            pass

from torch.nn import LSTM as func #temporary
def test(f = func):
    documentation = f.__doc__
    #Step 1: normalize case
    documentation = documentation.lower()
    #Step 2: split lines
    documentation = documentation.split('\n')
    for i in range(len(documentation)):
        documentation[i] += "\\n" #add fake newline

    #Step 3: Find sections
    roots = []
    for index in range(len(documentation)):
        line = documentation[index]
        depth = line.count("\t") + line.count("    ")
        IsColon = line.find(":\\n")!=-1#if we find a colon and fake newline, all lines below this depth are inherited
        if IsColon:
            line = line.replace("\t", "",line.count("\t"))#
            line = line.replace("  ", "",line.count("  "))
            line = line.replace("\\n", "")
            roots.append(depth, index, line)#The name of a root along with it's line index and depth are stored for dictionary synthesis
    

            

        


t = test()
print(t)

