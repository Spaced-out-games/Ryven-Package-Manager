from param_counter import get_parameter_count
from inspect import getfullargspec,getmodule, getmodulename
#import inspect
#inspect.getmodule

'''
DESCRIPTION
This file can help generate simple nodes, namely those that do not need a visual representation or are Python - implemented functions.
It is mainly a dev tool and as such is NOT suitable for 1 to 1 renditions of module functions. Code generated by this function still needs tested and debugged
'''


"""
{warning}
class {node_name}(Node):
    \"\"\"{obj.__doc__}\"\"\"
    title = '{name}'
    init_inputs = [
        {inputs}
    ]
    init_outputs = [
        NodeOutputBP(),
    ]
    color = '{color}'
    def update_event(self, inp=-1):
        self.set_output_val(0, {m_name}.{call}({
            ', '.join([f'self.input({i})' for i in range(len(args))]) 
                                        }))
"""
class Ryven_Nodifier:
    '''
    Mostly a function module. No need for instantiation
    '''
    def param_count(self,func):
        return get_parameter_count(func)
    def nodify(self, obj):
        name = obj.__name__
        #name = "".format(mod.__name__, e.__name__)
        try:
            sig = getfullargspec(obj)
            args = sig.args
            warning = ""
        except Exception as e:
            warning = f'''\n
"""
WARNING: Module {name} was generated using fallback option. May contain bugs
"""
'''
        argcnt = self.param_count(obj)
class foo:
    def bar():
        pass

import torch
func = torch.rand(size = (20,5))

#module, name, class
print(type(func).__module__)