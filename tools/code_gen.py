import pprint
import torch
from param_counter import get_parameter_count
import inspect#getfullargspec,getmodule, getmodulename
import cmath
'''
DESCRIPTION
This file can help generate simple nodes, namely those that do not need a visual representation or are Python - implemented functions.
It is mainly a dev tool and as such is NOT suitable for 1 to 1 renditions of module functions. Code generated by this function still needs tested and debugged
'''
"""
{warning}
class {node_name}(Node):
    \"\"\"{obj.__doc__}\"\"\"
    title = '{name}'
    init_inputs = [
        {inputs}
    ]
    init_outputs = [
        NodeOutputBP(),
    ]
    color = '{color}'
    def update_event(self, inp=-1):
        self.set_output_val(0, {m_name}.{call}({
            ', '.join([f'self.input({i})' for i in range(len(args))]) 
                                        }))
"""
def module_recursive_dict(object,attrlist = [],depth = 0, parent = {}):
    #if inspect.ismodule(object):
    out = []
    d = dir(object)

    for i in d:

        attribute = getattr(object, i)
        if inspect.ismodule(attribute) and (attrlist.count(i) <= 2 or depth == 0):
            if i not in attrlist:
                attrlist.append(i)
                child = module_recursive_dict(attribute, attrlist, depth + 1, out)
                out.append({i: child})
        if not inspect.ismodule(attribute):
            attrlist.append(i)
            out.append(i)

    return out
import torch
mrc = module_recursive_dict(inspect)
pprint.pprint(mrc)
