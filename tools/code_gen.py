from ast import arg
from pydoc import doc
from string import ascii_uppercase
import sys
from inspect import isfunction, getargspec,getfullargspec
from jinja2 import is_undefined


'''
DESCRIPTION
This file can help generate simple nodes, namely those that do not need a visual representation or are Python - implemented functions.
It is mainly a dev tool and as such is NOT suitable for 1 to 1 renditions of module functions. Code generated by this function still needs tested and debugged

'''
class Ryven_Nodifier:
    '''
    Mostly a function module. No need for instantiation
    '''
    def num_args(f):
        '''Attempt to parse the docstring of function not implemented in Python'''
        if isfunction(f):
            return len(getargspec(f).args)
        else:
            pass

from torch.nn import LSTM as func #temporary
def test(f = func):
    documentation = f.__doc__
#Step 1: normalize case
    documentation = documentation.lower()
#Step 2: split lines
    documentation = documentation.split('\n')
#Step 3: filter
    for index in range(len(documentation)):
        line = documentation[index]
        #find arguments start
        if ("args:" in line) or ("arguments:" in line) ("inputs:" in line):
            arg_start = (index if is_undefined(arg_start) else arg_start) #condition prevents index overwrite
        elif ("input" in line) or ("arg" in line) or ("argument" in line):
            num_args = 1
        #find output start
        if ("args:" in line) or ("arguments:" in line) ("inputs:" in line):
            arg_start = (index if is_undefined(arg_start) else arg_start) #condition prevents index overwrite
        elif ("input" in line) or ("arg" in line) or ("argument" in line):
        


t = test()
print(t)

